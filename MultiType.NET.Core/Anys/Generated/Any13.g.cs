//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MultiType.NET.SourceGenerator
//     Library Version: 1.0.0.0
//     Runtime Version: 8.0.17
//     Generated: 2025-06-21 20:48:57 UTC
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace MultiType.NET.Core.Anys.Generated;
using global::System.Diagnostics.CodeAnalysis;
using global::System.Diagnostics;
using global::System.Runtime.CompilerServices;
using global::System.Text.Json.Serialization;
using global::MultiType.NET.Core.Helpers;
using global::System.Text.Json;
using global::MultiType.NET.Core.Exceptions;
using global::MultiType.NET.Core.Serialization.Generated;

/// <inheritdoc/>
[JsonConverter(typeof(AnyJsonConverter<,,,,,,,,,,,, >))]
[DebuggerDisplay("{DebuggerDisplay,nq}")]
public readonly struct Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : global::MultiType.NET.Core.IAny
{
    private string DebuggerDisplay => TypeIndex == 0 ? "[Uninitialized]" : $"[TypeIndex: {TypeIndex}] Value = {Value} ({Value?.GetType().Name})";

    private readonly ValueType? _valueType;
    private readonly object? _referenceType;
    private readonly bool _isValueType;
    /// <inheritdoc/>
    public byte TypeIndex { get; }
    /// <inheritdoc/>
    public object? Value => _isValueType ? _valueType : _referenceType;
    /// <inheritdoc/>
    public Type Type => Value?.GetType() ?? typeof(void);
    /// <inheritdoc/>
    public bool HasValue => this.Value is not null;
    /// <inheritdoc/>
    public bool IsNull => _valueType is null && _referenceType is null;
    /// <summary>
    /// The set of allowed types for this Any.
    /// </summary>
    public static Type[] AllowedTypes => new[]
    {
        typeof(T1),
        typeof(T2),
        typeof(T3),
        typeof(T4),
        typeof(T5),
        typeof(T6),
        typeof(T7),
        typeof(T8),
        typeof(T9),
        typeof(T10),
        typeof(T11),
        typeof(T12),
        typeof(T13)
    };

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool Is<T>() => (typeof(T) == typeof(T1) && TypeIndex == 1) || (typeof(T) == typeof(T2) && TypeIndex == 2) || (typeof(T) == typeof(T3) && TypeIndex == 3) || (typeof(T) == typeof(T4) && TypeIndex == 4) || (typeof(T) == typeof(T5) && TypeIndex == 5) || (typeof(T) == typeof(T6) && TypeIndex == 6) || (typeof(T) == typeof(T7) && TypeIndex == 7) || (typeof(T) == typeof(T8) && TypeIndex == 8) || (typeof(T) == typeof(T9) && TypeIndex == 9) || (typeof(T) == typeof(T10) && TypeIndex == 10) || (typeof(T) == typeof(T11) && TypeIndex == 11) || (typeof(T) == typeof(T12) && TypeIndex == 12) || (typeof(T) == typeof(T13) && TypeIndex == 13);
    /// <inheritdoc/>
    public T As<T>()
    {
        if (Is<T>())
            return (T)Value!;
        throw new InvalidCastException($"Type {typeof(T).Name} is not stored in this Any<{typeof(T1).Name}, {typeof(T2).Name}, {typeof(T3).Name}, {typeof(T4).Name}, {typeof(T5).Name}, {typeof(T6).Name}, {typeof(T7).Name}, {typeof(T8).Name}, {typeof(T9).Name}, {typeof(T10).Name}, {typeof(T11).Name}, {typeof(T12).Name}, {typeof(T13).Name}>.");
    }

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T? AsNullable<T>()
        where T : class
    {
        if (IsNull)
            return null;
        return As<T>();
    }

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T? AsNullableStruct<T>()
        where T : struct
    {
        if (IsNull)
            return null;
        return As<T>();
    }

    /// <summary>
    /// Creates a new Any from the given value.
    /// </summary>
    /// <remarks>
    /// ⚠️ <b>Performance Warning:</b>
    /// This method causes boxing of value types. For best performance, use <c>FromTn</c>, or implicit casting instead.
    /// </remarks>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> From(object? value)
    {
        return value switch
        {
            T1 v1 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v1),
            T2 v2 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v2),
            T3 v3 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v3),
            T4 v4 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v4),
            T5 v5 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v5),
            T6 v6 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v6),
            T7 v7 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v7),
            T8 v8 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v8),
            T9 v9 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v9),
            T10 v10 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v10),
            T11 v11 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v11),
            T12 v12 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v12),
            T13 v13 => new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v13),
            _ => throw new InvalidCastException($"Cannot cast {value?.GetType().Name ?? "null"} to Any of ({typeof(T1).Name}, {typeof(T2).Name}, {typeof(T3).Name}, {typeof(T4).Name}, {typeof(T5).Name}, {typeof(T6).Name}, {typeof(T7).Name}, {typeof(T8).Name}, {typeof(T9).Name}, {typeof(T10).Name}, {typeof(T11).Name}, {typeof(T12).Name}, {typeof(T13).Name})")};
    }

    /// <summary>
    /// Creates a new Any from the given value.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool TryFrom(object? value, out Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> result)
    {
        switch (value)
        {
            case T1 v1:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v1);
                return true;
            case T2 v2:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v2);
                return true;
            case T3 v3:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v3);
                return true;
            case T4 v4:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v4);
                return true;
            case T5 v5:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v5);
                return true;
            case T6 v6:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v6);
                return true;
            case T7 v7:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v7);
                return true;
            case T8 v8:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v8);
                return true;
            case T9 v9:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v9);
                return true;
            case T10 v10:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v10);
                return true;
            case T11 v11:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v11);
                return true;
            case T12 v12:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v12);
                return true;
            case T13 v13:
                result = new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v13);
                return true;
            default:
                result = default;
                return false;
        }
    }

    /// <summary>
    /// Creates a new Any from the given value of type T1.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT1(T1? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T2.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT2(T2? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T3.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT3(T3? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T4.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT4(T4? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T5.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT5(T5? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T6.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT6(T6? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T7.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT7(T7? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T8.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT8(T8? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T9.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT9(T9? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T10.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT10(T10? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T11.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT11(T11? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T12.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT12(T12? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    /// <summary>
    /// Creates a new Any from the given value of type T13.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> FromT13(T13? value)
    {
        return new Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(value);
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T1? value)
    {
        TypeIndex = 1;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T2? value)
    {
        TypeIndex = 2;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T3? value)
    {
        TypeIndex = 3;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T4? value)
    {
        TypeIndex = 4;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T5? value)
    {
        TypeIndex = 5;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T6? value)
    {
        TypeIndex = 6;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T7? value)
    {
        TypeIndex = 7;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T8? value)
    {
        TypeIndex = 8;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T9? value)
    {
        TypeIndex = 9;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T10? value)
    {
        TypeIndex = 10;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T11? value)
    {
        TypeIndex = 11;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T12? value)
    {
        TypeIndex = 12;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    private Any(T13? value)
    {
        TypeIndex = 13;
        if (value is null)
        {
            _valueType = null;
            _referenceType = null;
            _isValueType = false;
            return;
        }

        if (value is ValueType vt)
        {
            _valueType = vt;
            _referenceType = null;
            _isValueType = true;
        }
        else
        {
            _valueType = null;
            _referenceType = value;
            _isValueType = false;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T1? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T2? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T3? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T4? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T5? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T6? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T7? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T8? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T9? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T10? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T11? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T12? v) => new(v);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static implicit operator Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(T13? v) => new(v);
    /// <summary>
    /// Returns a string representation of the current Any value.
    /// </summary>
    public override string ToString()
    {
        if (TypeIndex == 0)
            return "Any[Uninitialized]";
        string typeName = Value?.GetType().Name ?? "null";
        string valueStr = Value?.ToString() ?? "null";
        return $"Any[{typeName}] = {valueStr}";
    }

    public override bool Equals(object? obj)
    {
        // Fast path: Reference equality
        if (ReferenceEquals(this, obj))
            return true;
        // Check exact type (prevent cross-type comparison)
        if (obj is not global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> other)
            return false;
        // Fast path: Same index and both null
        if (TypeIndex == other.TypeIndex && Value is null && other.Value is null)
            return true;
        // Full equality check
        return TypeIndex == other.TypeIndex && Equals(Value, other.Value);
    }

    public override int GetHashCode()
    {
        // Recommended pattern: HashCode.Combine (C# 8+)
        return HashCode.Combine(TypeIndex, Value);
    }

    public static bool operator ==(global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> left, global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> right) => left.Equals(right);
    public static bool operator !=(global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> left, global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> right) => !left.Equals(right);
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TResult Match<TResult>(Func<T1, TResult> case1, Func<T2, TResult> case2, Func<T3, TResult> case3, Func<T4, TResult> case4, Func<T5, TResult> case5, Func<T6, TResult> case6, Func<T7, TResult> case7, Func<T8, TResult> case8, Func<T9, TResult> case9, Func<T10, TResult> case10, Func<T11, TResult> case11, Func<T12, TResult> case12, Func<T13, TResult> case13)
    {
        return this.TypeIndex switch
        {
            1 => case1((T1)Value!),
            2 => case2((T2)Value!),
            3 => case3((T3)Value!),
            4 => case4((T4)Value!),
            5 => case5((T5)Value!),
            6 => case6((T6)Value!),
            7 => case7((T7)Value!),
            8 => case8((T8)Value!),
            9 => case9((T9)Value!),
            10 => case10((T10)Value!),
            11 => case11((T11)Value!),
            12 => case12((T12)Value!),
            13 => case13((T13)Value!),
            _ => throw new InvalidOperationException("Any is not initialized."),
        };
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void Match([MaybeNull] Action<T1> case1, [MaybeNull] Action<T2> case2, [MaybeNull] Action<T3> case3, [MaybeNull] Action<T4> case4, [MaybeNull] Action<T5> case5, [MaybeNull] Action<T6> case6, [MaybeNull] Action<T7> case7, [MaybeNull] Action<T8> case8, [MaybeNull] Action<T9> case9, [MaybeNull] Action<T10> case10, [MaybeNull] Action<T11> case11, [MaybeNull] Action<T12> case12, [MaybeNull] Action<T13> case13)
    {
        switch (this.TypeIndex)
        {
            case 1:
                case1((T1)Value!);
                break;
            case 2:
                case2((T2)Value!);
                break;
            case 3:
                case3((T3)Value!);
                break;
            case 4:
                case4((T4)Value!);
                break;
            case 5:
                case5((T5)Value!);
                break;
            case 6:
                case6((T6)Value!);
                break;
            case 7:
                case7((T7)Value!);
                break;
            case 8:
                case8((T8)Value!);
                break;
            case 9:
                case9((T9)Value!);
                break;
            case 10:
                case10((T10)Value!);
                break;
            case 11:
                case11((T11)Value!);
                break;
            case 12:
                case12((T12)Value!);
                break;
            case 13:
                case13((T13)Value!);
                break;
            default:
                throw new InvalidOperationException("Any is not initialized.");
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TResult? TryMatch<TResult>(Func<T1, TResult>? case1 = null, Func<T2, TResult>? case2 = null, Func<T3, TResult>? case3 = null, Func<T4, TResult>? case4 = null, Func<T5, TResult>? case5 = null, Func<T6, TResult>? case6 = null, Func<T7, TResult>? case7 = null, Func<T8, TResult>? case8 = null, Func<T9, TResult>? case9 = null, Func<T10, TResult>? case10 = null, Func<T11, TResult>? case11 = null, Func<T12, TResult>? case12 = null, Func<T13, TResult>? case13 = null)
    {
        return this.TypeIndex switch
        {
            1when case1 != null => case1((T1)Value!),
            2when case2 != null => case2((T2)Value!),
            3when case3 != null => case3((T3)Value!),
            4when case4 != null => case4((T4)Value!),
            5when case5 != null => case5((T5)Value!),
            6when case6 != null => case6((T6)Value!),
            7when case7 != null => case7((T7)Value!),
            8when case8 != null => case8((T8)Value!),
            9when case9 != null => case9((T9)Value!),
            10when case10 != null => case10((T10)Value!),
            11when case11 != null => case11((T11)Value!),
            12when case12 != null => case12((T12)Value!),
            13when case13 != null => case13((T13)Value!),
            _ => default,
        };
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public void TryMatch([MaybeNull] Action<T1>? case1 = null, [MaybeNull] Action<T2>? case2 = null, [MaybeNull] Action<T3>? case3 = null, [MaybeNull] Action<T4>? case4 = null, [MaybeNull] Action<T5>? case5 = null, [MaybeNull] Action<T6>? case6 = null, [MaybeNull] Action<T7>? case7 = null, [MaybeNull] Action<T8>? case8 = null, [MaybeNull] Action<T9>? case9 = null, [MaybeNull] Action<T10>? case10 = null, [MaybeNull] Action<T11>? case11 = null, [MaybeNull] Action<T12>? case12 = null, [MaybeNull] Action<T13>? case13 = null)
    {
        switch (this.TypeIndex)
        {
            case 1when case1 != null:
                case1((T1)Value!);
                break;
            case 2when case2 != null:
                case2((T2)Value!);
                break;
            case 3when case3 != null:
                case3((T3)Value!);
                break;
            case 4when case4 != null:
                case4((T4)Value!);
                break;
            case 5when case5 != null:
                case5((T5)Value!);
                break;
            case 6when case6 != null:
                case6((T6)Value!);
                break;
            case 7when case7 != null:
                case7((T7)Value!);
                break;
            case 8when case8 != null:
                case8((T8)Value!);
                break;
            case 9when case9 != null:
                case9((T9)Value!);
                break;
            case 10when case10 != null:
                case10((T10)Value!);
                break;
            case 11when case11 != null:
                case11((T11)Value!);
                break;
            case 12when case12 != null:
                case12((T12)Value!);
                break;
            case 13when case13 != null:
                case13((T13)Value!);
                break;
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T1 GetT1(out global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T1));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T1), TypeIndex);
            Guards.ThrowIfTypeMismatch<T1>(TypeIndex, 1, Value, out T1 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T1).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T1 GetT1()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T1));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T1), TypeIndex);
            Guards.ThrowIfTypeMismatch<T1>(TypeIndex, 1, Value, out T1 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T1).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T2 GetT2(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T1)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T2));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T2), TypeIndex);
            Guards.ThrowIfTypeMismatch<T2>(TypeIndex, 2, Value, out T2 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T2).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T2 GetT2()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T2));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T2), TypeIndex);
            Guards.ThrowIfTypeMismatch<T2>(TypeIndex, 2, Value, out T2 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T2).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T3 GetT3(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T2)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T3));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T3), TypeIndex);
            Guards.ThrowIfTypeMismatch<T3>(TypeIndex, 3, Value, out T3 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T3).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T3 GetT3()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T3));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T3), TypeIndex);
            Guards.ThrowIfTypeMismatch<T3>(TypeIndex, 3, Value, out T3 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T3).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T4 GetT4(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T3)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T4));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T4), TypeIndex);
            Guards.ThrowIfTypeMismatch<T4>(TypeIndex, 4, Value, out T4 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T4).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T4 GetT4()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T4));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T4), TypeIndex);
            Guards.ThrowIfTypeMismatch<T4>(TypeIndex, 4, Value, out T4 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T4).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T5 GetT5(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T4)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T5));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T5), TypeIndex);
            Guards.ThrowIfTypeMismatch<T5>(TypeIndex, 5, Value, out T5 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T5).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T5 GetT5()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T5));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T5), TypeIndex);
            Guards.ThrowIfTypeMismatch<T5>(TypeIndex, 5, Value, out T5 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T5).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T6 GetT6(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T5)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T6));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T6), TypeIndex);
            Guards.ThrowIfTypeMismatch<T6>(TypeIndex, 6, Value, out T6 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T6).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T6 GetT6()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T6));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T6), TypeIndex);
            Guards.ThrowIfTypeMismatch<T6>(TypeIndex, 6, Value, out T6 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T6).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T7 GetT7(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T6)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T7));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T7), TypeIndex);
            Guards.ThrowIfTypeMismatch<T7>(TypeIndex, 7, Value, out T7 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T7).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T7 GetT7()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T7));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T7), TypeIndex);
            Guards.ThrowIfTypeMismatch<T7>(TypeIndex, 7, Value, out T7 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T7).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T8 GetT8(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T7)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T8));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T8), TypeIndex);
            Guards.ThrowIfTypeMismatch<T8>(TypeIndex, 8, Value, out T8 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T8).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T8 GetT8()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T8));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T8), TypeIndex);
            Guards.ThrowIfTypeMismatch<T8>(TypeIndex, 8, Value, out T8 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T8).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T9 GetT9(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T8)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T9));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T9), TypeIndex);
            Guards.ThrowIfTypeMismatch<T9>(TypeIndex, 9, Value, out T9 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T9).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T9 GetT9()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T9));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T9), TypeIndex);
            Guards.ThrowIfTypeMismatch<T9>(TypeIndex, 9, Value, out T9 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T9).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T10 GetT10(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T9)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T10));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T10), TypeIndex);
            Guards.ThrowIfTypeMismatch<T10>(TypeIndex, 10, Value, out T10 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T10).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T10 GetT10()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T10));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T10), TypeIndex);
            Guards.ThrowIfTypeMismatch<T10>(TypeIndex, 10, Value, out T10 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T10).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T11 GetT11(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T10)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T12)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T11));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T11), TypeIndex);
            Guards.ThrowIfTypeMismatch<T11>(TypeIndex, 11, Value, out T11 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T11).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T11 GetT11()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T11));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T11), TypeIndex);
            Guards.ThrowIfTypeMismatch<T11>(TypeIndex, 11, Value, out T11 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T11).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T12 GetT12(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T11)Value!),
            13 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From((T13)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T12));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T12), TypeIndex);
            Guards.ThrowIfTypeMismatch<T12>(TypeIndex, 12, Value, out T12 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T12).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T12 GetT12()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T12));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T12), TypeIndex);
            Guards.ThrowIfTypeMismatch<T12>(TypeIndex, 12, Value, out T12 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T12).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T13 GetT13(out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> remainder)
    {
        remainder = TypeIndex switch
        {
            1 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T1)Value!),
            2 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T2)Value!),
            3 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T3)Value!),
            4 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T4)Value!),
            5 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T5)Value!),
            6 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T6)Value!),
            7 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T7)Value!),
            8 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T8)Value!),
            9 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T9)Value!),
            10 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T10)Value!),
            11 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T11)Value!),
            12 => global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From((T12)Value!),
            _ => default
        };
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T13));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T13), TypeIndex);
            Guards.ThrowIfTypeMismatch<T13>(TypeIndex, 13, Value, out T13 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T13).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T13 GetT13()
    {
        try
        {
            Guards.ThrowIfNotInitialized(TypeIndex, typeof(T13));
            Guards.ThrowIfNotOutOfRange(TypeIndex, 13);
            Guards.ThrowIfNull(Value, typeof(T13), TypeIndex);
            Guards.ThrowIfTypeMismatch<T13>(TypeIndex, 13, Value, out T13 typedValue);
            return typedValue;
        }
        catch (Exception ex)when (ex is not InvalidAnyStateException)
        {
            // Wrap unexpected exceptions (Better Exception Handling)
            throw new InvalidAnyStateException($"Unexpected error getting value of type {typeof(T13).Name}\nTypeIndex: {TypeIndex}\nValue type: {Value?.GetType().Name ?? "null"}", ex);
        }
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGet<T>([MaybeNull] out T value)
    {
        if (Is<T>())
        {
            value = As<T>();
            return true;
        }

        value = default !;
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT1([MaybeNull] out T1 value, out global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 1 && Value is T1 t1)
        {
            value = t1;
            return true;
        }

        if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT1([MaybeNull] out T1 value)
    {
        value = default;
        if (TypeIndex == 1 && Value is T1 t1)
        {
            value = t1;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT2([MaybeNull] out T2 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 2 && Value is T2 t2)
        {
            value = t2;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT2([MaybeNull] out T2 value)
    {
        value = default;
        if (TypeIndex == 2 && Value is T2 t2)
        {
            value = t2;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT3([MaybeNull] out T3 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 3 && Value is T3 t3)
        {
            value = t3;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT3([MaybeNull] out T3 value)
    {
        value = default;
        if (TypeIndex == 3 && Value is T3 t3)
        {
            value = t3;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT4([MaybeNull] out T4 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 4 && Value is T4 t4)
        {
            value = t4;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T5, T6, T7, T8, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT4([MaybeNull] out T4 value)
    {
        value = default;
        if (TypeIndex == 4 && Value is T4 t4)
        {
            value = t4;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT5([MaybeNull] out T5 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 5 && Value is T5 t5)
        {
            value = t5;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T6, T7, T8, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT5([MaybeNull] out T5 value)
    {
        value = default;
        if (TypeIndex == 5 && Value is T5 t5)
        {
            value = t5;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT6([MaybeNull] out T6 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 6 && Value is T6 t6)
        {
            value = t6;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T7, T8, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT6([MaybeNull] out T6 value)
    {
        value = default;
        if (TypeIndex == 6 && Value is T6 t6)
        {
            value = t6;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT7([MaybeNull] out T7 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 7 && Value is T7 t7)
        {
            value = t7;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T8, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT7([MaybeNull] out T7 value)
    {
        value = default;
        if (TypeIndex == 7 && Value is T7 t7)
        {
            value = t7;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT8([MaybeNull] out T8 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 8 && Value is T8 t8)
        {
            value = t8;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T9, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT8([MaybeNull] out T8 value)
    {
        value = default;
        if (TypeIndex == 8 && Value is T8 t8)
        {
            value = t8;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT9([MaybeNull] out T9 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 9 && Value is T9 t9)
        {
            value = t9;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t8);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T10, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT9([MaybeNull] out T9 value)
    {
        value = default;
        if (TypeIndex == 9 && Value is T9 t9)
        {
            value = t9;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT10([MaybeNull] out T10 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 10 && Value is T10 t10)
        {
            value = t10;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t9);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T11, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT10([MaybeNull] out T10 value)
    {
        value = default;
        if (TypeIndex == 10 && Value is T10 t10)
        {
            value = t10;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT11([MaybeNull] out T11 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 11 && Value is T11 t11)
        {
            value = t11;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t10);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t12);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T12, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT11([MaybeNull] out T11 value)
    {
        value = default;
        if (TypeIndex == 11 && Value is T11 t11)
        {
            value = t11;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT12([MaybeNull] out T12 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 12 && Value is T12 t12)
        {
            value = t12;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t11);
        else if (TypeIndex == 13 && Value is T13 t13)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T13>.From(t13);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT12([MaybeNull] out T12 value)
    {
        value = default;
        if (TypeIndex == 12 && Value is T12 t12)
        {
            value = t12;
            return true;
        }

        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT13([MaybeNull] out T13 value, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> remainder)
    {
        value = default;
        remainder = default;
        if (TypeIndex == 13 && Value is T13 t13)
        {
            value = t13;
            return true;
        }

        if (TypeIndex == 1 && Value is T1 t1)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t1);
        else if (TypeIndex == 2 && Value is T2 t2)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t2);
        else if (TypeIndex == 3 && Value is T3 t3)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t3);
        else if (TypeIndex == 4 && Value is T4 t4)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t4);
        else if (TypeIndex == 5 && Value is T5 t5)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t5);
        else if (TypeIndex == 6 && Value is T6 t6)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t6);
        else if (TypeIndex == 7 && Value is T7 t7)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t7);
        else if (TypeIndex == 8 && Value is T8 t8)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t8);
        else if (TypeIndex == 9 && Value is T9 t9)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t9);
        else if (TypeIndex == 10 && Value is T10 t10)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t10);
        else if (TypeIndex == 11 && Value is T11 t11)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t11);
        else if (TypeIndex == 12 && Value is T12 t12)
            remainder = global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>.From(t12);
        return false;
    }

    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool TryGetT13([MaybeNull] out T13 value)
    {
        value = default;
        if (TypeIndex == 13 && Value is T13 t13)
        {
            value = t13;
            return true;
        }

        return false;
    }

    /// <summary>
    /// Maps the value contained in this Any to a new type using a common result type.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TResult Map<TResult>(Func<T1, TResult> map1, Func<T2, TResult> map2, Func<T3, TResult> map3, Func<T4, TResult> map4, Func<T5, TResult> map5, Func<T6, TResult> map6, Func<T7, TResult> map7, Func<T8, TResult> map8, Func<T9, TResult> map9, Func<T10, TResult> map10, Func<T11, TResult> map11, Func<T12, TResult> map12, Func<T13, TResult> map13)
    {
        return TypeIndex switch
        {
            1when Value is T1 v1 => map1(v1),
            2when Value is T2 v2 => map2(v2),
            3when Value is T3 v3 => map3(v3),
            4when Value is T4 v4 => map4(v4),
            5when Value is T5 v5 => map5(v5),
            6when Value is T6 v6 => map6(v6),
            7when Value is T7 v7 => map7(v7),
            8when Value is T8 v8 => map8(v8),
            9when Value is T9 v9 => map9(v9),
            10when Value is T10 v10 => map10(v10),
            11when Value is T11 v11 => map11(v11),
            12when Value is T12 v12 => map12(v12),
            13when Value is T13 v13 => map13(v13),
            _ => throw new InvalidAnyStateException("Any is not in a valid state for mapping")};
    }

    /// <summary>
    /// Maps the value to a new Any type with different type parameters.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public global::MultiType.NET.Core.Anys.Generated.Any<TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7, TResult8, TResult9, TResult10, TResult11, TResult12, TResult13> MapAny<TResult1, TResult2, TResult3, TResult4, TResult5, TResult6, TResult7, TResult8, TResult9, TResult10, TResult11, TResult12, TResult13>(Func<T1, TResult1> map1, Func<T2, TResult2> map2, Func<T3, TResult3> map3, Func<T4, TResult4> map4, Func<T5, TResult5> map5, Func<T6, TResult6> map6, Func<T7, TResult7> map7, Func<T8, TResult8> map8, Func<T9, TResult9> map9, Func<T10, TResult10> map10, Func<T11, TResult11> map11, Func<T12, TResult12> map12, Func<T13, TResult13> map13)
    {
        return TypeIndex switch
        {
            1when Value is T1 v1 => map1(v1),
            2when Value is T2 v2 => map2(v2),
            3when Value is T3 v3 => map3(v3),
            4when Value is T4 v4 => map4(v4),
            5when Value is T5 v5 => map5(v5),
            6when Value is T6 v6 => map6(v6),
            7when Value is T7 v7 => map7(v7),
            8when Value is T8 v8 => map8(v8),
            9when Value is T9 v9 => map9(v9),
            10when Value is T10 v10 => map10(v10),
            11when Value is T11 v11 => map11(v11),
            12when Value is T12 v12 => map12(v12),
            13when Value is T13 v13 => map13(v13),
            _ => throw new InvalidAnyStateException("Any is not in a valid state for mapping")};
    }

    /// <summary>
    /// Maps the value using different strategies for value types and reference types.
    /// </summary>
    public TResult MapValue<TResult>(Func<ValueType, TResult> valueTypeMapper, Func<object, TResult> referenceTypeMapper)
    {
        if (Value is null)
            throw new InvalidAnyStateException("Cannot map null value");
        return _isValueType ? valueTypeMapper(_valueType!) : referenceTypeMapper(_referenceType!);
    }

    /// <summary>
    /// Asynchronously maps the Any value.
    /// </summary>
    public async Task<TResult> MapAsync<TResult>(Func<T1, Task<TResult>> map1, Func<T2, Task<TResult>> map2, Func<T3, Task<TResult>> map3, Func<T4, Task<TResult>> map4, Func<T5, Task<TResult>> map5, Func<T6, Task<TResult>> map6, Func<T7, Task<TResult>> map7, Func<T8, Task<TResult>> map8, Func<T9, Task<TResult>> map9, Func<T10, Task<TResult>> map10, Func<T11, Task<TResult>> map11, Func<T12, Task<TResult>> map12, Func<T13, Task<TResult>> map13)
    {
        return TypeIndex switch
        {
            1when Value is T1 v1 => await map1(v1),
            2when Value is T2 v2 => await map2(v2),
            3when Value is T3 v3 => await map3(v3),
            4when Value is T4 v4 => await map4(v4),
            5when Value is T5 v5 => await map5(v5),
            6when Value is T6 v6 => await map6(v6),
            7when Value is T7 v7 => await map7(v7),
            8when Value is T8 v8 => await map8(v8),
            9when Value is T9 v9 => await map9(v9),
            10when Value is T10 v10 => await map10(v10),
            11when Value is T11 v11 => await map11(v11),
            12when Value is T12 v12 => await map12(v12),
            13when Value is T13 v13 => await map13(v13),
            _ => throw new InvalidAnyStateException("Any is not in a valid state for mapping")};
    }

    /// <summary>
    /// Maps the value with null-safety, returning a default value if null.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TResult MapOrDefault<TResult>(Func<T1, TResult> map1, Func<T2, TResult> map2, Func<T3, TResult> map3, Func<T4, TResult> map4, Func<T5, TResult> map5, Func<T6, TResult> map6, Func<T7, TResult> map7, Func<T8, TResult> map8, Func<T9, TResult> map9, Func<T10, TResult> map10, Func<T11, TResult> map11, Func<T12, TResult> map12, Func<T13, TResult> map13, TResult defaultValue = default !)
    {
        if (IsNull)
            return defaultValue;
        return TypeIndex switch
        {
            1when Value is T1 v1 => map1(v1),
            2when Value is T2 v2 => map2(v2),
            3when Value is T3 v3 => map3(v3),
            4when Value is T4 v4 => map4(v4),
            5when Value is T5 v5 => map5(v5),
            6when Value is T6 v6 => map6(v6),
            7when Value is T7 v7 => map7(v7),
            8when Value is T8 v8 => map8(v8),
            9when Value is T9 v9 => map9(v9),
            10when Value is T10 v10 => map10(v10),
            11when Value is T11 v11 => map11(v11),
            12when Value is T12 v12 => map12(v12),
            13when Value is T13 v13 => map13(v13),
            _ => defaultValue
        };
    }

    /// <summary>
    /// Maps the value with exception handling.
    /// </summary>
    public TResult MapSafe<TResult>(Func<T1, TResult> map1, Func<T2, TResult> map2, Func<T3, TResult> map3, Func<T4, TResult> map4, Func<T5, TResult> map5, Func<T6, TResult> map6, Func<T7, TResult> map7, Func<T8, TResult> map8, Func<T9, TResult> map9, Func<T10, TResult> map10, Func<T11, TResult> map11, Func<T12, TResult> map12, Func<T13, TResult> map13, Func<Exception, TResult> errorHandler)
    {
        try
        {
            return TypeIndex switch
            {
                1when Value is T1 v1 => map1(v1),
                2when Value is T2 v2 => map2(v2),
                3when Value is T3 v3 => map3(v3),
                4when Value is T4 v4 => map4(v4),
                5when Value is T5 v5 => map5(v5),
                6when Value is T6 v6 => map6(v6),
                7when Value is T7 v7 => map7(v7),
                8when Value is T8 v8 => map8(v8),
                9when Value is T9 v9 => map9(v9),
                10when Value is T10 v10 => map10(v10),
                11when Value is T11 v11 => map11(v11),
                12when Value is T12 v12 => map12(v12),
                13when Value is T13 v13 => map13(v13),
                _ => throw new InvalidAnyStateException("Any is not in a valid state for mapping")};
        }
        catch (Exception ex)
        {
            return errorHandler(ex);
        }
    }

    /// <summary>
    /// Maps the value conditionally based on predicates.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TResult MapWhere<TResult>(Func<T1, bool> predicate1, Func<T1, TResult> map1, Func<T2, bool> predicate2, Func<T2, TResult> map2, Func<T3, bool> predicate3, Func<T3, TResult> map3, Func<T4, bool> predicate4, Func<T4, TResult> map4, Func<T5, bool> predicate5, Func<T5, TResult> map5, Func<T6, bool> predicate6, Func<T6, TResult> map6, Func<T7, bool> predicate7, Func<T7, TResult> map7, Func<T8, bool> predicate8, Func<T8, TResult> map8, Func<T9, bool> predicate9, Func<T9, TResult> map9, Func<T10, bool> predicate10, Func<T10, TResult> map10, Func<T11, bool> predicate11, Func<T11, TResult> map11, Func<T12, bool> predicate12, Func<T12, TResult> map12, Func<T13, bool> predicate13, Func<T13, TResult> map13, TResult defaultValue = default !)
    {
        return TypeIndex switch
        {
            1when Value is T1 v1 && predicate1(v1) => map1(v1),
            2when Value is T2 v2 && predicate2(v2) => map2(v2),
            3when Value is T3 v3 && predicate3(v3) => map3(v3),
            4when Value is T4 v4 && predicate4(v4) => map4(v4),
            5when Value is T5 v5 && predicate5(v5) => map5(v5),
            6when Value is T6 v6 && predicate6(v6) => map6(v6),
            7when Value is T7 v7 && predicate7(v7) => map7(v7),
            8when Value is T8 v8 && predicate8(v8) => map8(v8),
            9when Value is T9 v9 && predicate9(v9) => map9(v9),
            10when Value is T10 v10 && predicate10(v10) => map10(v10),
            11when Value is T11 v11 && predicate11(v11) => map11(v11),
            12when Value is T12 v12 && predicate12(v12) => map12(v12),
            13when Value is T13 v13 && predicate13(v13) => map13(v13),
            _ => defaultValue
        };
    }

    /// <summary>
    /// Maps with access to the entire Any instance.
    /// </summary>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public TResult MapWithContext<TResult>(Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T1, TResult> map1, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T2, TResult> map2, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T3, TResult> map3, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T4, TResult> map4, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T5, TResult> map5, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T6, TResult> map6, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T7, TResult> map7, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T8, TResult> map8, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T9, TResult> map9, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T10, TResult> map10, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T11, TResult> map11, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T12, TResult> map12, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T13, TResult> map13)
    {
        return TypeIndex switch
        {
            1when Value is T1 v1 => map1(this, v1),
            2when Value is T2 v2 => map2(this, v2),
            3when Value is T3 v3 => map3(this, v3),
            4when Value is T4 v4 => map4(this, v4),
            5when Value is T5 v5 => map5(this, v5),
            6when Value is T6 v6 => map6(this, v6),
            7when Value is T7 v7 => map7(this, v7),
            8when Value is T8 v8 => map8(this, v8),
            9when Value is T9 v9 => map9(this, v9),
            10when Value is T10 v10 => map10(this, v10),
            11when Value is T11 v11 => map11(this, v11),
            12when Value is T12 v12 => map12(this, v12),
            13when Value is T13 v13 => map13(this, v13),
            _ => throw new InvalidAnyStateException("Any is not in a valid state for mapping")};
    }

    /// <summary>
    /// Projects the Any value into a new form using the specified selector functions.
    /// </summary>
    public TResult Select<TResult>(Func<T1, TResult> selector1, Func<T2, TResult> selector2, Func<T3, TResult> selector3, Func<T4, TResult> selector4, Func<T5, TResult> selector5, Func<T6, TResult> selector6, Func<T7, TResult> selector7, Func<T8, TResult> selector8, Func<T9, TResult> selector9, Func<T10, TResult> selector10, Func<T11, TResult> selector11, Func<T12, TResult> selector12, Func<T13, TResult> selector13)
    {
        return TypeIndex switch
        {
            1when Value is T1 v1 => selector1(v1),
            2when Value is T2 v2 => selector2(v2),
            3when Value is T3 v3 => selector3(v3),
            4when Value is T4 v4 => selector4(v4),
            5when Value is T5 v5 => selector5(v5),
            6when Value is T6 v6 => selector6(v6),
            7when Value is T7 v7 => selector7(v7),
            8when Value is T8 v8 => selector8(v8),
            9when Value is T9 v9 => selector9(v9),
            10when Value is T10 v10 => selector10(v10),
            11when Value is T11 v11 => selector11(v11),
            12when Value is T12 v12 => selector12(v12),
            13when Value is T13 v13 => selector13(v13),
            _ => throw new InvalidAnyStateException("Any is not in a valid state for selection")};
    }

    /// <summary>
    /// Projects the Any value using selector functions, or returns a fallback default.
    /// </summary>
    public TResult SelectOrDefault<TResult>(Func<T1, TResult> selector1, Func<T2, TResult> selector2, Func<T3, TResult> selector3, Func<T4, TResult> selector4, Func<T5, TResult> selector5, Func<T6, TResult> selector6, Func<T7, TResult> selector7, Func<T8, TResult> selector8, Func<T9, TResult> selector9, Func<T10, TResult> selector10, Func<T11, TResult> selector11, Func<T12, TResult> selector12, Func<T13, TResult> selector13, TResult defaultValue = default !)
    {
        try
        {
            return Select(selector1, selector2, selector3, selector4, selector5, selector6, selector7, selector8, selector9, selector10, selector11, selector12, selector13);
        }
        catch
        {
            return defaultValue;
        }
    }

    /// <summary>
    /// Attempts to project the Any value using selector functions.
    /// Returns null if uninitialized or type mismatch.
    /// </summary>
    public TResult? TrySelect<TResult>(Func<T1, TResult> selector1, Func<T2, TResult> selector2, Func<T3, TResult> selector3, Func<T4, TResult> selector4, Func<T5, TResult> selector5, Func<T6, TResult> selector6, Func<T7, TResult> selector7, Func<T8, TResult> selector8, Func<T9, TResult> selector9, Func<T10, TResult> selector10, Func<T11, TResult> selector11, Func<T12, TResult> selector12, Func<T13, TResult> selector13)
    {
        if (TypeIndex == 0 || Value is null)
            return default;
        return Select(selector1, selector2, selector3, selector4, selector5, selector6, selector7, selector8, selector9, selector10, selector11, selector12, selector13);
    }

    /// <summary>
    /// Projects the Any value with access to full context.
    /// </summary>
    public TResult SelectWithContext<TResult>(Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T1, TResult> selector1, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T2, TResult> selector2, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T3, TResult> selector3, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T4, TResult> selector4, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T5, TResult> selector5, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T6, TResult> selector6, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T7, TResult> selector7, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T8, TResult> selector8, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T9, TResult> selector9, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T10, TResult> selector10, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T11, TResult> selector11, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T12, TResult> selector12, Func<global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>, T13, TResult> selector13)
    {
        return TypeIndex switch
        {
            1when Value is T1 v1 => selector1(this, v1),
            2when Value is T2 v2 => selector2(this, v2),
            3when Value is T3 v3 => selector3(this, v3),
            4when Value is T4 v4 => selector4(this, v4),
            5when Value is T5 v5 => selector5(this, v5),
            6when Value is T6 v6 => selector6(this, v6),
            7when Value is T7 v7 => selector7(this, v7),
            8when Value is T8 v8 => selector8(this, v8),
            9when Value is T9 v9 => selector9(this, v9),
            10when Value is T10 v10 => selector10(this, v10),
            11when Value is T11 v11 => selector11(this, v11),
            12when Value is T12 v12 => selector12(this, v12),
            13when Value is T13 v13 => selector13(this, v13),
            _ => throw new InvalidAnyStateException("Any is not in a valid state for selection")};
    }

    /// <summary>
    /// Conditionally maps Any value if predicate passes, otherwise returns default.
    /// </summary>
    public TResult SelectWhere<TResult>(Func<T1, bool> predicate1, Func<T1, TResult> selector1, Func<T2, bool> predicate2, Func<T2, TResult> selector2, Func<T3, bool> predicate3, Func<T3, TResult> selector3, Func<T4, bool> predicate4, Func<T4, TResult> selector4, Func<T5, bool> predicate5, Func<T5, TResult> selector5, Func<T6, bool> predicate6, Func<T6, TResult> selector6, Func<T7, bool> predicate7, Func<T7, TResult> selector7, Func<T8, bool> predicate8, Func<T8, TResult> selector8, Func<T9, bool> predicate9, Func<T9, TResult> selector9, Func<T10, bool> predicate10, Func<T10, TResult> selector10, Func<T11, bool> predicate11, Func<T11, TResult> selector11, Func<T12, bool> predicate12, Func<T12, TResult> selector12, Func<T13, bool> predicate13, Func<T13, TResult> selector13, TResult defaultValue = default !)
    {
        if (TypeIndex == 1 && Value is T1 v1 && predicate1(v1))
            return selector1(v1);
        else if (TypeIndex == 2 && Value is T2 v2 && predicate2(v2))
            return selector2(v2);
        else if (TypeIndex == 3 && Value is T3 v3 && predicate3(v3))
            return selector3(v3);
        else if (TypeIndex == 4 && Value is T4 v4 && predicate4(v4))
            return selector4(v4);
        else if (TypeIndex == 5 && Value is T5 v5 && predicate5(v5))
            return selector5(v5);
        else if (TypeIndex == 6 && Value is T6 v6 && predicate6(v6))
            return selector6(v6);
        else if (TypeIndex == 7 && Value is T7 v7 && predicate7(v7))
            return selector7(v7);
        else if (TypeIndex == 8 && Value is T8 v8 && predicate8(v8))
            return selector8(v8);
        else if (TypeIndex == 9 && Value is T9 v9 && predicate9(v9))
            return selector9(v9);
        else if (TypeIndex == 10 && Value is T10 v10 && predicate10(v10))
            return selector10(v10);
        else if (TypeIndex == 11 && Value is T11 v11 && predicate11(v11))
            return selector11(v11);
        else if (TypeIndex == 12 && Value is T12 v12 && predicate12(v12))
            return selector12(v12);
        else if (TypeIndex == 13 && Value is T13 v13 && predicate13(v13))
            return selector13(v13);
        else
            return defaultValue;
    }

    /// <summary>
    /// Asynchronously projects the Any value using the specified async selector functions.
    /// </summary>
    public async Task<TResult> SelectAsync<TResult>(Func<T1, Task<TResult>> selector1, Func<T2, Task<TResult>> selector2, Func<T3, Task<TResult>> selector3, Func<T4, Task<TResult>> selector4, Func<T5, Task<TResult>> selector5, Func<T6, Task<TResult>> selector6, Func<T7, Task<TResult>> selector7, Func<T8, Task<TResult>> selector8, Func<T9, Task<TResult>> selector9, Func<T10, Task<TResult>> selector10, Func<T11, Task<TResult>> selector11, Func<T12, Task<TResult>> selector12, Func<T13, Task<TResult>> selector13)
    {
        return await (TypeIndex switch
        {
            1when Value is T1 v1 => selector1(v1),
            2when Value is T2 v2 => selector2(v2),
            3when Value is T3 v3 => selector3(v3),
            4when Value is T4 v4 => selector4(v4),
            5when Value is T5 v5 => selector5(v5),
            6when Value is T6 v6 => selector6(v6),
            7when Value is T7 v7 => selector7(v7),
            8when Value is T8 v8 => selector8(v8),
            9when Value is T9 v9 => selector9(v9),
            10when Value is T10 v10 => selector10(v10),
            11when Value is T11 v11 => selector11(v11),
            12when Value is T12 v12 => selector12(v12),
            13when Value is T13 v13 => selector13(v13),
            _ => throw new InvalidAnyStateException("Any is not in a valid state for selection")});
    }

    /// <summary>
    /// Asynchronously projects the Any value, or returns fallback default.
    /// </summary>
    public async Task<TResult> SelectAsyncOrDefault<TResult>(Func<T1, Task<TResult>> selector1, Func<T2, Task<TResult>> selector2, Func<T3, Task<TResult>> selector3, Func<T4, Task<TResult>> selector4, Func<T5, Task<TResult>> selector5, Func<T6, Task<TResult>> selector6, Func<T7, Task<TResult>> selector7, Func<T8, Task<TResult>> selector8, Func<T9, Task<TResult>> selector9, Func<T10, Task<TResult>> selector10, Func<T11, Task<TResult>> selector11, Func<T12, Task<TResult>> selector12, Func<T13, Task<TResult>> selector13, TResult defaultValue = default !)
    {
        try
        {
            return await SelectAsync(selector1, selector2, selector3, selector4, selector5, selector6, selector7, selector8, selector9, selector10, selector11, selector12, selector13);
        }
        catch
        {
            return defaultValue;
        }
    }

    /// <summary>
    /// Executes the appropriate action based on the Any type.
    /// </summary>
    public void Switch(Action<T1> case1, Action<T2> case2, Action<T3> case3, Action<T4> case4, Action<T5> case5, Action<T6> case6, Action<T7> case7, Action<T8> case8, Action<T9> case9, Action<T10> case10, Action<T11> case11, Action<T12> case12, Action<T13> case13)
    {
        switch (TypeIndex)
        {
            case 1when Value is T1 v1:
                case1(v1);
                break;
            case 2when Value is T2 v2:
                case2(v2);
                break;
            case 3when Value is T3 v3:
                case3(v3);
                break;
            case 4when Value is T4 v4:
                case4(v4);
                break;
            case 5when Value is T5 v5:
                case5(v5);
                break;
            case 6when Value is T6 v6:
                case6(v6);
                break;
            case 7when Value is T7 v7:
                case7(v7);
                break;
            case 8when Value is T8 v8:
                case8(v8);
                break;
            case 9when Value is T9 v9:
                case9(v9);
                break;
            case 10when Value is T10 v10:
                case10(v10);
                break;
            case 11when Value is T11 v11:
                case11(v11);
                break;
            case 12when Value is T12 v12:
                case12(v12);
                break;
            case 13when Value is T13 v13:
                case13(v13);
                break;
            default:
                throw new InvalidAnyStateException("Any is not in a valid state for switching");
        };
    }

    /// <summary>
    /// Asynchronously executes the appropriate action based on the Any type.
    /// </summary>
    public async Task SwitchAsync(Func<T1, Task> case1, Func<T2, Task> case2, Func<T3, Task> case3, Func<T4, Task> case4, Func<T5, Task> case5, Func<T6, Task> case6, Func<T7, Task> case7, Func<T8, Task> case8, Func<T9, Task> case9, Func<T10, Task> case10, Func<T11, Task> case11, Func<T12, Task> case12, Func<T13, Task> case13)
    {
        switch (TypeIndex)
        {
            case 1when Value is T1 v1:
                await case1(v1);
                break;
            case 2when Value is T2 v2:
                await case2(v2);
                break;
            case 3when Value is T3 v3:
                await case3(v3);
                break;
            case 4when Value is T4 v4:
                await case4(v4);
                break;
            case 5when Value is T5 v5:
                await case5(v5);
                break;
            case 6when Value is T6 v6:
                await case6(v6);
                break;
            case 7when Value is T7 v7:
                await case7(v7);
                break;
            case 8when Value is T8 v8:
                await case8(v8);
                break;
            case 9when Value is T9 v9:
                await case9(v9);
                break;
            case 10when Value is T10 v10:
                await case10(v10);
                break;
            case 11when Value is T11 v11:
                await case11(v11);
                break;
            case 12when Value is T12 v12:
                await case12(v12);
                break;
            case 13when Value is T13 v13:
                await case13(v13);
                break;
            default:
                throw new InvalidAnyStateException("Any is not in a valid state for switching");
        }
    }

    /// <summary>
    /// Executes the appropriate action if the Any is initialized; otherwise, runs default fallback.
    /// </summary>
    public void SwitchOrDefault(Action<T1> case1, Action<T2> case2, Action<T3> case3, Action<T4> case4, Action<T5> case5, Action<T6> case6, Action<T7> case7, Action<T8> case8, Action<T9> case9, Action<T10> case10, Action<T11> case11, Action<T12> case12, Action<T13> case13, Action fallback)
    {
        switch (TypeIndex)
        {
            case 1when Value is T1 v1:
                case1(v1);
                break;
            case 2when Value is T2 v2:
                case2(v2);
                break;
            case 3when Value is T3 v3:
                case3(v3);
                break;
            case 4when Value is T4 v4:
                case4(v4);
                break;
            case 5when Value is T5 v5:
                case5(v5);
                break;
            case 6when Value is T6 v6:
                case6(v6);
                break;
            case 7when Value is T7 v7:
                case7(v7);
                break;
            case 8when Value is T8 v8:
                case8(v8);
                break;
            case 9when Value is T9 v9:
                case9(v9);
                break;
            case 10when Value is T10 v10:
                case10(v10);
                break;
            case 11when Value is T11 v11:
                case11(v11);
                break;
            case 12when Value is T12 v12:
                case12(v12);
                break;
            case 13when Value is T13 v13:
                case13(v13);
                break;
            default:
                fallback();
                break;
        }
    }

    /// <summary>
    /// Deconstructs the Any into individual out variables based on the active type.
    /// </summary>
    public void Deconstruct(out T1 value1, out T2 value2, out T3 value3, out T4 value4, out T5 value5, out T6 value6, out T7 value7, out T8 value8, out T9 value9, out T10 value10, out T11 value11, out T12 value12, out T13 value13)
    {
        value1 = default !;
        value2 = default !;
        value3 = default !;
        value4 = default !;
        value5 = default !;
        value6 = default !;
        value7 = default !;
        value8 = default !;
        value9 = default !;
        value10 = default !;
        value11 = default !;
        value12 = default !;
        value13 = default !;
        switch (TypeIndex)
        {
            case 1when Value is T1 v1:
                value1 = v1;
                break;
            case 2when Value is T2 v2:
                value2 = v2;
                break;
            case 3when Value is T3 v3:
                value3 = v3;
                break;
            case 4when Value is T4 v4:
                value4 = v4;
                break;
            case 5when Value is T5 v5:
                value5 = v5;
                break;
            case 6when Value is T6 v6:
                value6 = v6;
                break;
            case 7when Value is T7 v7:
                value7 = v7;
                break;
            case 8when Value is T8 v8:
                value8 = v8;
                break;
            case 9when Value is T9 v9:
                value9 = v9;
                break;
            case 10when Value is T10 v10:
                value10 = v10;
                break;
            case 11when Value is T11 v11:
                value11 = v11;
                break;
            case 12when Value is T12 v12:
                value12 = v12;
                break;
            case 13when Value is T13 v13:
                value13 = v13;
                break;
            default:
                throw new InvalidAnyStateException($"""
                Unable to deconstruct Any — invalid TypeIndex ({TypeIndex}) or type mismatch.
                Actual value: {Value?.GetType().Name ?? "null"}
            """);
        }
    }

    public static bool TryParse(string input, IFormatProvider? _, out global::MultiType.NET.Core.Anys.Generated.Any<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> result)
    {
        try
        {
            if (TryCast<T1>(input, out var t1))
            {
                result = FromT1(t1);
                return true;
            }

            if (TryCast<T2>(input, out var t2))
            {
                result = FromT2(t2);
                return true;
            }

            if (TryCast<T3>(input, out var t3))
            {
                result = FromT3(t3);
                return true;
            }

            if (TryCast<T4>(input, out var t4))
            {
                result = FromT4(t4);
                return true;
            }

            if (TryCast<T5>(input, out var t5))
            {
                result = FromT5(t5);
                return true;
            }

            if (TryCast<T6>(input, out var t6))
            {
                result = FromT6(t6);
                return true;
            }

            if (TryCast<T7>(input, out var t7))
            {
                result = FromT7(t7);
                return true;
            }

            if (TryCast<T8>(input, out var t8))
            {
                result = FromT8(t8);
                return true;
            }

            if (TryCast<T9>(input, out var t9))
            {
                result = FromT9(t9);
                return true;
            }

            if (TryCast<T10>(input, out var t10))
            {
                result = FromT10(t10);
                return true;
            }

            if (TryCast<T11>(input, out var t11))
            {
                result = FromT11(t11);
                return true;
            }

            if (TryCast<T12>(input, out var t12))
            {
                result = FromT12(t12);
                return true;
            }

            if (TryCast<T13>(input, out var t13))
            {
                result = FromT13(t13);
                return true;
            }
        }
        catch
        {
        // ignore
        }

        result = default;
        return false;
    }

    public static bool TryCast<T>(string? input, out T? value)
    {
        value = default;
        if (typeof(T).IsPrimitiveType(input, out var parsed))
        {
            value = (T)parsed!;
            return true;
        }

        try
        {
            bool needsQuotes = typeof(T) == typeof(string) && (input?.StartsWith("\"") != true && input?.EndsWith("\"") != true);
            string jsonInput = needsQuotes ? $"\"{input}\"" : input!;
            value = JsonSerializer.Deserialize<T>(jsonInput);
            return value is not null;
        }
        catch
        {
            return false;
        }
    }
}