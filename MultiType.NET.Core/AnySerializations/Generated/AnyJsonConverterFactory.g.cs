//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MultiType.NET.SourceGenerator
//     Library Version: 1.0.0.0
//     Runtime Version: 8.0.7
//     Generated: 2025-06-11 03:45:40 UTC
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace MultiType.NET.Core.Serialization.Generated;
using System.Text.Json;
using System.Text.Json.Serialization;

/// <summary>
/// Provides a factory implementation for creating JSON converters tailored to handle Any types.
/// </summary>
/// <remarks>
/// This factory dynamically generates a specific JSON converter for a Any type based on the generic
/// arguments provided. The converter supports Any types with up to 8 generic type parameters.
/// </remarks>
public class AnyJsonConverterFactory : JsonConverterFactory
{
    /// Determines whether the specified type can be converted by this JsonConverterFactory.
    /// <param name = "typeToConvert">The type to check for convertibility.</param>
    /// <returns>
    /// True if the type can be converted; otherwise, false.
    /// </returns>
    public override bool CanConvert(Type typeToConvert)
    {
        if (!typeToConvert.IsValueType || !typeToConvert.IsGenericType)
            return false;
        var genericType = typeToConvert.GetGenericTypeDefinition();
        return genericType.FullName!.StartsWith("MultiType.NET.Core.Anys.Generated.Any");
    }

    /// <summary>
    /// Creates a JsonConverter instance for the specified type.
    /// </summary>
    /// <param name = "typeToConvert">The type of object to create a converter for.</param>
    /// <param name = "options">The serialization options to use when creating the converter.</param>
    /// <returns>A JsonConverter instance capable of handling the specified type.</returns>
    public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
    {
        var args = typeToConvert.GetGenericArguments();
        return args.Length switch
        {
            2 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<, >).MakeGenericType(args))!,
            3 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,, >).MakeGenericType(args))!,
            4 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,, >).MakeGenericType(args))!,
            5 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,, >).MakeGenericType(args))!,
            6 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,, >).MakeGenericType(args))!,
            7 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,, >).MakeGenericType(args))!,
            8 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,, >).MakeGenericType(args))!,
            9 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,, >).MakeGenericType(args))!,
            10 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,,, >).MakeGenericType(args))!,
            11 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,,,, >).MakeGenericType(args))!,
            12 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,,,,, >).MakeGenericType(args))!,
            13 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,,,,,, >).MakeGenericType(args))!,
            14 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,,,,,,, >).MakeGenericType(args))!,
            15 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,,,,,,,, >).MakeGenericType(args))!,
            16 => (JsonConverter)Activator.CreateInstance(typeof(AnyJsonConverter<,,,,,,,,,,,,,,, >).MakeGenericType(args))!,
            _ => throw new NotSupportedException($"Any<{args.Length}> is not supported. Try 'MuliType.NET.SourceGenerator' to generate +17 types with its convertors."),
        };
    }
}