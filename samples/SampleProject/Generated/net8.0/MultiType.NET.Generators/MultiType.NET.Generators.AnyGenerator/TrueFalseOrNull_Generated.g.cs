//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by MultiType.NET.SourceGenerator
//     Library Version: {LibraryVersion}
//     Runtime Version: {RuntimeVersion}
//     Generated: {GenerationTime}
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
namespace SampleProject;
using global::System.Runtime.CompilerServices;

public readonly partial struct TrueFalseOrNull
{
    private readonly global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null> _inner;
    public TrueFalseOrNull(global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null> value) => _inner = value;
    public static implicit operator TrueFalseOrNull(SampleProject.TrueFalseOrNull.True value) => new(global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null>.From(value));
    public static implicit operator TrueFalseOrNull(SampleProject.TrueFalseOrNull.False value) => new(global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null>.From(value));
    public static implicit operator TrueFalseOrNull(SampleProject.TrueFalseOrNull.Null value) => new(global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null>.From(value));
    public byte TypeIndex => _inner.TypeIndex;
    /// <inheritdoc/>
    public object? Value => _inner.Value;
    /// <inheritdoc/>
    public Type Type => _inner.Type;
    /// <inheritdoc/>
    public bool HasValue => _inner.HasValue;
    /// <inheritdoc/>
    public bool IsNull => _inner.IsNull;
    /// <summary>
    /// The set of allowed types for this Any.
    /// </summary>
    public Type[] AllowedTypes => global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null>.AllowedTypes;
    public global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null> Inner => _inner;

    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public bool Is<T>() => _inner.Is<T>();
    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T As<T>() => _inner.As<T>();
    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T? AsNullable<T>()
        where T : class => _inner.AsNullable<T>();
    /// <inheritdoc/>
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public T? AsNullableStruct<T>()
        where T : struct => _inner.AsNullableStruct<T>();
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static TrueFalseOrNull From(object? value) => new TrueFalseOrNull(global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null>.From(value));
    [MethodImpl(MethodImplOptions.AggressiveInlining)]
    public static bool TryFrom(object? value, out TrueFalseOrNull result)
    {
        var success = global::MultiType.NET.Core.Anys.Generated.Any<global::SampleProject.TrueFalseOrNull.True, global::SampleProject.TrueFalseOrNull.False, global::SampleProject.TrueFalseOrNull.Null>.TryFrom(value, out var inner);
        result = new TrueFalseOrNull(inner);
        return success;
    }
}